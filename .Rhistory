}
# Close the db connection
return(output_data_frame)
}
# Example usage:
bag_name <- "ur3_move_two"
extract_topic_info(bag_name)
View(output_data_frame)
source("R/format_msg_csv.R")
#' \item{joint_states topic}{Position, velocity, and effort values for 6-DOF robotic manipulator.}
#' \item{output_data_frame[ur_controller_state]}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#' \item{ur_controller_state topic}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#'
#' @export
#'
#' @examples
#' extract_topic_info("ur3_move")
#' extract_topic_info("ur3_move_two")
#'
extract_topic_info <- function(bag_name = NULL) {
sqlite <- dbDriver("SQLite")
if (is.null(bag_name)) {
print("No bag provided, proceeding with Joint States message")
bag_name <- "ur3_move"
}
## Connect to bag file to retrieve topic information
file_path_bag <- file.path("vignettes", bag_name, paste0(bag_name, "_0.db3"))
# Open db connection to read the bag file
db_info <- dbGetInfo(dbConnect(sqlite, file_path_bag))
sql_conn <- dbConnect(RSQLite::SQLite(), db_info[["dbname"]])
name = dbGetQuery(sql_conn, "SELECT name FROM topics")
type = dbGetQuery(sql_conn, "SELECT type FROM topics")
dbDisconnect(sql_conn)
# Pull the topic name and message type into a list
topic_information <- list(
name = name,
type = type
)
# Find the number of topics in the bag file
num_topics <- length(topic_information$name)
output_data_frame <- list()
# Loops through the CSV files associated with the bag file
for (i in num_topics) {
# Pick a topic
topic_name <- topic_information$name[[1]][i]
print(paste0("Printing: ", topic_name))
# Send topic to csv_msg_format function
output_data_frame[[i]] <- format_msg_csv(bag_name, topic_name)
# Write the output to a  file
}
# Close the db connection
return(output_data_frame)
}
# Example usage:
bag_name <- "ur3_move_two"
extract_topic_info(bag_name)
install.packages("roxygen2")
remotes::install_github("case-a2/ros2TopicPlotting")
devtools::load_all()
install.packages(devtools)
library(devtools)
install.packages(c("devtools", "usethis", "roxygen2"))
library(devtools)
devtools::load_all()
devtools::load_all()
rm(list = c("format_msg_csv"))
devtools::load_all()
rm(list = ls())
devtools::load_all()
rm(list = c("format_msg_csv"))
devtools::load_all()
exportPattern("^[[:alpha:]]+")
source("R/format_msg_csv.R")
devtools::document()
rm(list = c("format_msg_csv"))
devtools::document()
rm(list = c("format_msg_csv"))
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
rm(list = c("format_msg_csv"))
devtools:::document()
devtools::document()
devtools::load_all()
getAnywhere(format_msg_csv)
.format_msg_csv <- function(bag_name = NULL, topic_name = NULL) {
# If using the function, the package name and msg type can be extracted from the file
if (is.null(topic_name) | is.null(bag_name)) {
print("No topic or bag provided, proceeding with Joint States message")
topic_name <- "/joint_states"
bag_name <- "ur3_move"
}
# Convert the topic name to the csv file format ignoring the leading slash
topic_name <- gsub("^/", "", topic_name)
topic_name <- gsub("/", "_", topic_name)
# Read the .csv file
csv_file <- file.path("vignettes", bag_name, paste0(topic_name, ".csv"))
csv_data <- read.csv(csv_file, header = FALSE, stringsAsFactors = FALSE)
# Pull out the joint names
name = csv_data[4:9]
if (topic_name == "joint_states") {
# Manually assign columns to match the JointState message declaration (see src/sensor_msgs/msg/JointState.msg)
csv_target_range <- list(
position = csv_data[10:15],
velocity = csv_data[16:21],
effort = csv_data[22:27]
)
}
if (topic_name == "ur_controller_state") {
# Manually assign columns to match the JointTrajectoryControllerState message declaration
# (see src/control_msgs/msg/JointTrajectoryControllerState)
# Isolated error[], actual[], & desired[] positions
csv_target_range <- list(
error = csv_data[14:19],
desired = csv_data[32:37],
actual = csv_data[53:58]
)
}
# Add joint names to the column titles
for (i in seq_along(name)) {
joint_col_names <- name[[i]][1]
colnames(csv_target_range$position)[i] <- joint_col_names
colnames(csv_target_range$velocity)[i] <- joint_col_names
colnames(csv_target_range$effort)[i] <- joint_col_names
}
# Combine the data into a single data frame
joint_data_frame <- data.frame(
timestamp = csv_data$V1,
sequence_num = csv_data$V2,
csv_target_range
)
return(joint_data_frame)
}
getAnywhere(format_msg_csv)
getAnywhere(.format_msg_csv)
# Pull the topic name and message type into a list
topic_information <- list(
name = name,
type = type
)
# Find the number of topics in the bag file
num_topics <- length(topic_information$name)
output_data_frame <- list()
# Loops through the CSV files associated with the bag file
for (i in num_topics) {
# Pick a topic
topic_name <- topic_information$name[[1]][i]
print(paste0("Printing: ", topic_name))
# Send topic to csv_msg_format function
output_data_frame[[i]] <- .format_msg_csv(bag_name, topic_name)
# Write the output to a  file
}
# Pick a topic
topic_name <- topic_information$name[[1]][i]
devtools::document()
ls
getwd
devtools::document()
format_msg_csv <- function(bag_name = NULL, topic_name = NULL) {
# If using the function, the package name and msg type can be extracted from the file
if (is.null(topic_name) | is.null(bag_name)) {
print("No topic or bag provided, proceeding with Joint States message")
topic_name <- "/joint_states"
bag_name <- "ur3_move"
}
# Convert the topic name to the csv file format ignoring the leading slash
topic_name <- gsub("^/", "", topic_name)
topic_name <- gsub("/", "_", topic_name)
# Read the .csv file
csv_file <- file.path("vignettes", bag_name, paste0(topic_name, ".csv"))
csv_data <- read.csv(csv_file, header = FALSE, stringsAsFactors = FALSE)
# Pull out the joint names
name = csv_data[4:9]
if (topic_name == "joint_states") {
# Manually assign columns to match the JointState message declaration (see src/sensor_msgs/msg/JointState.msg)
csv_target_range <- list(
position = csv_data[10:15],
velocity = csv_data[16:21],
effort = csv_data[22:27]
)
}
if (topic_name == "ur_controller_state") {
# Manually assign columns to match the JointTrajectoryControllerState message declaration
# (see src/control_msgs/msg/JointTrajectoryControllerState)
# Isolated error[], actual[], & desired[] positions
csv_target_range <- list(
error = csv_data[14:19],
desired = csv_data[32:37],
actual = csv_data[53:58]
)
}
# Add joint names to the column titles
for (i in seq_along(name)) {
joint_col_names <- name[[i]][1]
colnames(csv_target_range$position)[i] <- joint_col_names
colnames(csv_target_range$velocity)[i] <- joint_col_names
colnames(csv_target_range$effort)[i] <- joint_col_names
}
# Combine the data into a single data frame
joint_data_frame <- data.frame(
timestamp = csv_data$V1,
sequence_num = csv_data$V2,
csv_target_range
)
return(joint_data_frame)
}
devtools::document()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise(extract_topic_info.R)
roxygen2::roxygenise(extract_topic_info)
roxygen2::roxygenise("extract_topic_info")
roxygen2::roxygenise("extract_topic_info.R")
roxygen2::roxygenise("R/extract_topic_info.R")
roxygen2::roxygenise("R/format_msg_csv.R")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(devtools)
devtools::document()
rlang::last_trace()
#' \item{joint_states topic}{Position, velocity, and effort values for 6-DOF robotic manipulator.}
#' \item{output_data_frame[ur_controller_state]}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#' \item{ur_controller_state topic}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#'
#' @export
#'
#' @examples
#' extract_topic_info("ur3_move")
#' extract_topic_info("ur3_move_two")
#'
extract_topic_info <- function(bag_name = NULL) {
sqlite <- dbDriver("SQLite")
if (is.null(bag_name)) {
print("No bag provided, proceeding with Joint States message")
bag_name <- "ur3_move"
}
## Connect to bag file to retrieve topic information
file_path_bag <- file.path("vignettes", bag_name, paste0(bag_name, "_0.db3"))
# Open db connection to read the bag file
db_info <- dbGetInfo(dbConnect(sqlite, file_path_bag))
sql_conn <- dbConnect(RSQLite::SQLite(), db_info[["dbname"]])
name = dbGetQuery(sql_conn, "SELECT name FROM topics")
type = dbGetQuery(sql_conn, "SELECT type FROM topics")
dbDisconnect(sql_conn)
# Pull the topic name and message type into a list
topic_information <- list(
name = name,
type = type
)
# Find the number of topics in the bag file
num_topics <- length(topic_information$name)
output_data_frame <- list()
# Loops through the CSV files associated with the bag file
for (i in num_topics) {
# Pick a topic
topic_name <- topic_information$name[[1]][i]
print(paste0("Printing: ", topic_name))
# Send topic to csv_msg_format function
output_data_frame[[i]] <- format_msg_csv(bag_name, topic_name)
# Write the output to a  file
}
# Close the db connection
return(output_data_frame)
}
# Example usage:
bag_name <- "ur3_move_two"
extract_topic_info(bag_name)
.format_msg_csv <- function(bag_name = NULL, topic_name = NULL) {
# If using the function, the package name and msg type can be extracted from the file
if (is.null(topic_name) | is.null(bag_name)) {
print("No topic or bag provided, proceeding with Joint States message")
topic_name <- "/joint_states"
bag_name <- "ur3_move"
}
# Convert the topic name to the csv file format ignoring the leading slash
topic_name <- gsub("^/", "", topic_name)
topic_name <- gsub("/", "_", topic_name)
# Read the .csv file
csv_file <- file.path("vignettes", bag_name, paste0(topic_name, ".csv"))
csv_data <- read.csv(csv_file, header = FALSE, stringsAsFactors = FALSE)
# Pull out the joint names
name = csv_data[4:9]
if (topic_name == "joint_states") {
# Manually assign columns to match the JointState message declaration (see src/sensor_msgs/msg/JointState.msg)
csv_target_range <- list(
position = csv_data[10:15],
velocity = csv_data[16:21],
effort = csv_data[22:27]
)
}
if (topic_name == "ur_controller_state") {
# Manually assign columns to match the JointTrajectoryControllerState message declaration
# (see src/control_msgs/msg/JointTrajectoryControllerState)
# Isolated error[], actual[], & desired[] positions
csv_target_range <- list(
error = csv_data[14:19],
desired = csv_data[32:37],
actual = csv_data[53:58]
)
}
# Add joint names to the column titles
for (i in seq_along(name)) {
joint_col_names <- name[[i]][1]
colnames(csv_target_range$position)[i] <- joint_col_names
colnames(csv_target_range$velocity)[i] <- joint_col_names
colnames(csv_target_range$effort)[i] <- joint_col_names
}
# Combine the data into a single data frame
joint_data_frame <- data.frame(
timestamp = csv_data$V1,
sequence_num = csv_data$V2,
csv_target_range
)
return(joint_data_frame)
}
devtools::document()
#' \item{joint_states topic}{Position, velocity, and effort values for 6-DOF robotic manipulator.}
#' \item{output_data_frame[ur_controller_state]}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#' \item{ur_controller_state topic}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#'
#' @export
#'
#' @examples
#' extract_topic_info("ur3_move")
#' extract_topic_info("ur3_move_two")
#'
extract_topic_info <- function(bag_name = NULL) {
sqlite <- dbDriver("SQLite")
if (is.null(bag_name)) {
print("No bag provided, proceeding with Joint States message")
bag_name <- "ur3_move"
}
## Connect to bag file to retrieve topic information
file_path_bag <- file.path("vignettes", bag_name, paste0(bag_name, "_0.db3"))
# Open db connection to read the bag file
db_info <- dbGetInfo(dbConnect(sqlite, file_path_bag))
sql_conn <- dbConnect(RSQLite::SQLite(), db_info[["dbname"]])
name = dbGetQuery(sql_conn, "SELECT name FROM topics")
type = dbGetQuery(sql_conn, "SELECT type FROM topics")
dbDisconnect(sql_conn)
# Pull the topic name and message type into a list
topic_information <- list(
name = name,
type = type
)
# Find the number of topics in the bag file
num_topics <- length(topic_information$name)
output_data_frame <- list()
# Loops through the CSV files associated with the bag file
for (i in num_topics) {
# Pick a topic
topic_name <- topic_information$name[[1]][i]
print(paste0("Printing: ", topic_name))
# Send topic to csv_msg_format function
output_data_frame[[i]] <- format_msg_csv(bag_name, topic_name)
# Write the output to a  file
}
# Close the db connection
return(output_data_frame)
}
# Example usage:
bag_name <- "ur3_move_two"
extract_topic_info(bag_name)
extract_topic_info("ur3_move_two")
#' \item{joint_states topic}{Position, velocity, and effort values for 6-DOF robotic manipulator.}
#' \item{output_data_frame[ur_controller_state]}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#' \item{ur_controller_state topic}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#'
#' @export
#'
#' @examples
#' extract_topic_info("ur3_move")
#' extract_topic_info("ur3_move_two")
#'
extract_topic_info <- function(bag_name = NULL) {
sqlite <- dbDriver("SQLite")
if (is.null(bag_name)) {
print("No bag provided, proceeding with Joint States message")
bag_name <- "ur3_move"
}
## Connect to bag file to retrieve topic information
file_path_bag <- file.path("vignettes", bag_name, paste0(bag_name, "_0.db3"))
# Open db connection to read the bag file
db_info <- dbGetInfo(dbConnect(sqlite, file_path_bag))
sql_conn <- dbConnect(RSQLite::SQLite(), db_info[["dbname"]])
name = dbGetQuery(sql_conn, "SELECT name FROM topics")
type = dbGetQuery(sql_conn, "SELECT type FROM topics")
dbDisconnect(sql_conn)
# Pull the topic name and message type into a list
topic_information <- list(
name = name,
type = type
)
# Find the number of topics in the bag file
num_topics <- length(topic_information$name)
output_data_frame <- list()
# Loops through the CSV files associated with the bag file
for (i in num_topics) {
# Pick a topic
topic_name <- topic_information$name[[1]][i]
print(paste0("Printing: ", topic_name))
# Send topic to csv_msg_format function
output_data_frame[[i]] <- format_msg_csv(bag_name, topic_name)
# Write the output to a  file
}
# Close the db connection
return(output_data_frame)
}
# Example usage:
bag_name <- "ur3_move_two"
extract_topic_info(bag_name)
#' \item{output_data_frame[ur_controller_state]}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#' \item{ur_controller_state topic}{Error, desired, and actual position values for 6-DOF robotic manipulator.}
#'
#' @export
#'
#' @examples
#' extract_topic_info("ur3_move")
#' extract_topic_info("ur3_move_two")
#'
#'
extract_topic_info <- function(bag_name = NULL) {
sqlite <- dbDriver("SQLite")
if (is.null(bag_name)) {
print("No bag provided, proceeding with Joint States message")
bag_name <- "ur3_move"
}
## Connect to bag file to retrieve topic information
file_path_bag <- file.path("vignettes", bag_name, paste0(bag_name, "_0.db3"))
# Open db connection to read the bag file
db_info <- dbGetInfo(dbConnect(sqlite, file_path_bag))
sql_conn <- dbConnect(RSQLite::SQLite(), db_info[["dbname"]])
name = dbGetQuery(sql_conn, "SELECT name FROM topics")
type = dbGetQuery(sql_conn, "SELECT type FROM topics")
dbDisconnect(sql_conn)
# Pull the topic name and message type into a list
topic_information <- list(
name = name,
type = type
)
# Find the number of topics in the bag file
num_topics <- length(topic_information$name)
output_data_frame <- list()
# Loops through the CSV files associated with the bag file
for (i in num_topics) {
# Pick a topic
topic_name <- topic_information$name[[1]][i]
print(paste0("Printing: ", topic_name))
# Send topic to csv_msg_format function
output_data_frame[[i]] <- format_msg_csv(bag_name, topic_name)
# Write the output to a  file
}
# Close the db connection
return(output_data_frame)
}
format_msg_csv <- function(bag_name = NULL, topic_name = NULL) {
# If using the function, the package name and msg type can be extracted from the file
if (is.null(topic_name) | is.null(bag_name)) {
print("No topic or bag provided, proceeding with Joint States message")
topic_name <- "/joint_states"
bag_name <- "ur3_move"
}
# Convert the topic name to the csv file format ignoring the leading slash
topic_name <- gsub("^/", "", topic_name)
topic_name <- gsub("/", "_", topic_name)
# Read the .csv file
csv_file <- file.path("vignettes", bag_name, paste0(topic_name, ".csv"))
csv_data <- read.csv(csv_file, header = FALSE, stringsAsFactors = FALSE)
# Pull out the joint names
name = csv_data[4:9]
if (topic_name == "joint_states") {
# Manually assign columns to match the JointState message declaration (see src/sensor_msgs/msg/JointState.msg)
csv_target_range <- list(
position = csv_data[10:15],
velocity = csv_data[16:21],
effort = csv_data[22:27]
)
}
if (topic_name == "ur_controller_state") {
# Manually assign columns to match the JointTrajectoryControllerState message declaration
# (see src/control_msgs/msg/JointTrajectoryControllerState)
# Isolated error[], actual[], & desired[] positions
csv_target_range <- list(
error = csv_data[14:19],
desired = csv_data[32:37],
actual = csv_data[53:58]
)
}
# Add joint names to the column titles
for (i in seq_along(name)) {
joint_col_names <- name[[i]][1]
colnames(csv_target_range$position)[i] <- joint_col_names
colnames(csv_target_range$velocity)[i] <- joint_col_names
colnames(csv_target_range$effort)[i] <- joint_col_names
}
# Combine the data into a single data frame
joint_data_frame <- data.frame(
timestamp = csv_data$V1,
sequence_num = csv_data$V2,
csv_target_range
)
return(joint_data_frame)
}
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(devtools)
devtools::document()
devtools::load_all(".")
